{
  "stats": {
    "suites": 8,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-04T16:30:07.029Z",
    "end": "2023-10-04T16:30:07.063Z",
    "duration": 34,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ed310792-fc3a-45dc-ac16-80b034ff7a6f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0141cccb-950a-4ab1-9bce-fd7d88dea726",
          "title": "getEvenNumbersFromArray positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "116fd693-ee5c-4804-9f41-d86ac13de371",
              "parentUUID": "0141cccb-950a-4ab1-9bce-fd7d88dea726",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "66134bca-e75c-483a-92d6-e0718d4dc706",
              "parentUUID": "0141cccb-950a-4ab1-9bce-fd7d88dea726",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers when provided with an array of odd and even numbers",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array of even numbers when provided with an array of odd and even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([1, 2, 3, 4, 5, 6, 7, 8]);\nexpect(validationResults).to.be.eql([2, 4, 6, 8]);",
              "err": {},
              "uuid": "73109298-84ec-4327-b5b1-913aa13f92c1",
              "parentUUID": "0141cccb-950a-4ab1-9bce-fd7d88dea726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers when provided with an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array of even numbers when provided with an array of even numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.getEvenNumbersFromArray([2, 4, 6, 8]);\nexpect(validationResults).to.be.eql([2, 4, 6, 8]);",
              "err": {},
              "uuid": "a0cdc9cc-4be8-4cfe-bbe4-3f59f8c04916",
              "parentUUID": "0141cccb-950a-4ab1-9bce-fd7d88dea726",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "73109298-84ec-4327-b5b1-913aa13f92c1",
            "a0cdc9cc-4be8-4cfe-bbe4-3f59f8c04916"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b52c08c-65d5-4d7f-a96e-668333253416",
          "title": "getEvenNumbersFromArray negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "04fafde4-c8e9-4ea6-922c-632b1dddfa54",
              "parentUUID": "5b52c08c-65d5-4d7f-a96e-668333253416",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "e127244c-d137-4d83-b1ab-032340927c2a",
              "parentUUID": "5b52c08c-65d5-4d7f-a96e-668333253416",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if provided with an integer",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 2;\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array`);",
              "err": {},
              "uuid": "7d09a7d6-33a2-4ea6-b4ff-89fba3e36b0b",
              "parentUUID": "5b52c08c-65d5-4d7f-a96e-668333253416",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array of strings and numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an array of strings and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [1, '2', 3, '4'];\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "0b5fc904-0113-4cc7-ba24-0c6e6418686d",
              "parentUUID": "5b52c08c-65d5-4d7f-a96e-668333253416",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array of arrays and numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an array of arrays and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [[1, 1, 1], 4, 6, 8];\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "89f8d05c-55eb-4b46-b4f3-ad6cbd77e328",
              "parentUUID": "5b52c08c-65d5-4d7f-a96e-668333253416",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d09a7d6-33a2-4ea6-b4ff-89fba3e36b0b",
            "0b5fc904-0113-4cc7-ba24-0c6e6418686d",
            "89f8d05c-55eb-4b46-b4f3-ad6cbd77e328"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5b70b3e-c6e3-4da2-a6c2-ba9994cf4d97",
          "title": "isAllNumbers positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isAllNumbers.spec.js",
          "file": "\\test\\numbersValidator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "a081a7eb-9851-440a-a9b8-dc7022d63417",
              "parentUUID": "f5b70b3e-c6e3-4da2-a6c2-ba9994cf4d97",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "649660e7-479f-491a-85b6-5d0d31f9d29f",
              "parentUUID": "f5b70b3e-c6e3-4da2-a6c2-ba9994cf4d97",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an array",
              "fullTitle": "isAllNumbers positive tests should return true when provided with an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([0, 1, 2, 3, 4]);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8ca354d9-c366-420e-9944-3ea0d0d43a2b",
              "parentUUID": "f5b70b3e-c6e3-4da2-a6c2-ba9994cf4d97",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8ca354d9-c366-420e-9944-3ea0d0d43a2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
          "title": "isAllNumbers negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isAllNumbers.spec.js",
          "file": "\\test\\numbersValidator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"before each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "92eac56e-6812-4b99-b79b-a18f4238df3f",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"after each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "c5faa531-7619-4047-8158-76c408ecb505",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return false if provided with an array containing a string",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([0, 1, 2, 'not a number']);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "e515b61f-fa00-4b5c-b9b4-e9030e3f46cb",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if provided with an array containing a boolean",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([0, 1, 2, true]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "0eb6991e-82b0-49bb-ad14-19ad6401ce88",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if provided with an array containing an object",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isAllNumbers([0, 1, 2, { not: 'an array' }]);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "1377cb83-ea0c-4bad-8f6c-23c49fe2768d",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if not provided with a string instead of an array",
              "fullTitle": "isAllNumbers negative tests should throw an error if not provided with a string instead of an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 2;\nexpect(() => {\n  validator.isAllNumbers(check);\n}).to.throw(`[${check}] is not an array`);",
              "err": {},
              "uuid": "df205ac4-ffe1-4490-8124-b06f1dba50e0",
              "parentUUID": "6ab6955b-38b0-4cc7-9620-4f77b7f6235b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e515b61f-fa00-4b5c-b9b4-e9030e3f46cb",
            "0eb6991e-82b0-49bb-ad14-19ad6401ce88",
            "1377cb83-ea0c-4bad-8f6c-23c49fe2768d",
            "df205ac4-ffe1-4490-8124-b06f1dba50e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a9defcca-0d8d-495a-8fe7-bd13d89afc58",
          "title": "isInteger positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isInteger.spec.js",
          "file": "\\test\\numbersValidator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f279a9f2-fd0d-4091-8ba5-39989c082cca",
              "parentUUID": "a9defcca-0d8d-495a-8fe7-bd13d89afc58",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "15c3b1d4-e0c2-4275-8a9f-b71dee411ca5",
              "parentUUID": "a9defcca-0d8d-495a-8fe7-bd13d89afc58",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if provided with an integer",
              "fullTitle": "isInteger positive tests should return true if provided with an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(7);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "6fd4df20-7935-4fd0-9c4f-a1735cf69469",
              "parentUUID": "a9defcca-0d8d-495a-8fe7-bd13d89afc58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if provided with an integer",
              "fullTitle": "isInteger positive tests should return true if provided with an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isInteger(-7);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "db727415-ff2c-4bee-b236-f81ecd7eff68",
              "parentUUID": "a9defcca-0d8d-495a-8fe7-bd13d89afc58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fd4df20-7935-4fd0-9c4f-a1735cf69469",
            "db727415-ff2c-4bee-b236-f81ecd7eff68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
          "title": "isInteger negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isInteger.spec.js",
          "file": "\\test\\numbersValidator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"before each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "2a197c0f-6ec2-4a30-8566-346149b17e07",
              "parentUUID": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"after each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d3faa109-a354-40e3-a405-0bcbd76132ad",
              "parentUUID": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if provided with a string",
              "fullTitle": "isInteger negative tests should throw an error if provided with a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = '7';\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "c1aa9c01-e7f2-4987-9cb6-b589a02d6974",
              "parentUUID": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a boolean",
              "fullTitle": "isInteger negative tests should throw an error if provided with a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = true;\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "c6ab3961-d9e8-4697-be44-cf08ac866683",
              "parentUUID": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array",
              "fullTitle": "isInteger negative tests should throw an error if provided with an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = ['1', 2];\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "dbec3c29-f50e-4c09-b5c7-51d99ce0aef2",
              "parentUUID": "ac1fa8fa-b578-401d-938b-9db6ff55165f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1aa9c01-e7f2-4987-9cb6-b589a02d6974",
            "c6ab3961-d9e8-4697-be44-cf08ac866683",
            "dbec3c29-f50e-4c09-b5c7-51d99ce0aef2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f62ad85-671c-42a3-8c63-4339354e22bf",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isNumberEven.spec.js",
          "file": "\\test\\numbersValidator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "53c23474-9df3-4c54-99b8-b8504ed4b8f3",
              "parentUUID": "7f62ad85-671c-42a3-8c63-4339354e22bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "645ee13a-8902-4736-90db-8402c3d7a41e",
              "parentUUID": "7f62ad85-671c-42a3-8c63-4339354e22bf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "b82d3d37-3ee3-4741-af5c-e88a76a5906f",
              "parentUUID": "7f62ad85-671c-42a3-8c63-4339354e22bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b82d3d37-3ee3-4741-af5c-e88a76a5906f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
          "title": "isNumberEven negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isNumberEven.spec.js",
          "file": "\\test\\numbersValidator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"before each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "eaebaef1-2845-4ef3-b972-db3fc0c1bb71",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"after each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "0a7bac07-1169-4726-96a3-41c554c4554d",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven negative tests should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "95a0f871-7927-4421-b768-ea42dc958bdb",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a string",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = '4';\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"string\"`);",
              "err": {},
              "uuid": "4edac585-8532-43f3-8e1c-67fb7995534b",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a boolean",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = true;\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"boolean\"`);",
              "err": {},
              "uuid": "1c09be93-c913-4df6-950c-af5e6c91ad8e",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [4, 6, 8];\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"object\"`);",
              "err": {},
              "uuid": "ba33623d-ddf9-4379-a8e8-3f4676a99b0e",
              "parentUUID": "555b5b15-6d7c-4f10-ba3d-b637d23e0b60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95a0f871-7927-4421-b768-ea42dc958bdb",
            "4edac585-8532-43f3-8e1c-67fb7995534b",
            "1c09be93-c913-4df6-950c-af5e6c91ad8e",
            "ba33623d-ddf9-4379-a8e8-3f4676a99b0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}