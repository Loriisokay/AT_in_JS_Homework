{
  "stats": {
    "suites": 8,
    "tests": 20,
    "passes": 20,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-05T07:58:14.979Z",
    "end": "2023-10-05T07:58:15.020Z",
    "duration": 41,
    "testsRegistered": 20,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "50479ce4-19fc-4038-a1f5-a8a67f9c9cfd",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "36ede6fd-5d00-42fe-9c3a-afb5439c2536",
          "title": "getEvenNumbersFromArray positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"before each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f24261a5-2006-4cef-a528-ea2f4d7d9745",
              "parentUUID": "36ede6fd-5d00-42fe-9c3a-afb5439c2536",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "fullTitle": "getEvenNumbersFromArray positive tests \"after each\" hook in \"getEvenNumbersFromArray positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d1678f0b-ab02-446e-a29c-69cd40eb6688",
              "parentUUID": "36ede6fd-5d00-42fe-9c3a-afb5439c2536",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return an array of even numbers when provided with an array of odd and even numbers",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array of even numbers when provided with an array of odd and even numbers",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [1, 2, 3, 4, 5, 6, 7, 8];\nconst even = [2, 4, 6, 8];\nconst validationResults = validator.getEvenNumbersFromArray(check);\nexpect(validationResults).to.be.eql(even);",
              "err": {},
              "uuid": "14805d4a-1ab0-49af-a9a6-d0f8e39bcaea",
              "parentUUID": "36ede6fd-5d00-42fe-9c3a-afb5439c2536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers when provided with an array of even numbers",
              "fullTitle": "getEvenNumbersFromArray positive tests should return an array of even numbers when provided with an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [2, 4, 6, 8];\nconst validationResults = validator.getEvenNumbersFromArray(check);\nexpect(validationResults).to.be.eql(check);",
              "err": {},
              "uuid": "ccdbb335-1bc6-4665-9f69-cd1c1c570b18",
              "parentUUID": "36ede6fd-5d00-42fe-9c3a-afb5439c2536",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "14805d4a-1ab0-49af-a9a6-d0f8e39bcaea",
            "ccdbb335-1bc6-4665-9f69-cd1c1c570b18"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
          "title": "getEvenNumbersFromArray negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "file": "\\test\\numbersValidator\\getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"before each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f6babfb0-4c3c-4158-9a1b-05ed454dbc94",
              "parentUUID": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "fullTitle": "getEvenNumbersFromArray negative tests \"after each\" hook in \"getEvenNumbersFromArray negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "738b7371-7602-456b-8e0e-63a097f4f9f7",
              "parentUUID": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if provided with an integer",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 2;\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array`);",
              "err": {},
              "uuid": "7fa2e47d-3838-4418-a8e2-19562439a7c3",
              "parentUUID": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array of strings and numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an array of strings and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [1, '2', 3, '4'];\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "8326271f-e172-43d7-a6ab-fe4e00611b7f",
              "parentUUID": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array of arrays and numbers",
              "fullTitle": "getEvenNumbersFromArray negative tests should throw an error if provided with an array of arrays and numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [[1, 1, 1], 4, 6, 8];\nexpect(() => {\n  validator.getEvenNumbersFromArray(check);\n}).to.throw(`[${check}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "90107201-d50d-4117-9ab8-24e2e0030967",
              "parentUUID": "0650b1c9-883d-4af6-a5ac-96870cdbaf3b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fa2e47d-3838-4418-a8e2-19562439a7c3",
            "8326271f-e172-43d7-a6ab-fe4e00611b7f",
            "90107201-d50d-4117-9ab8-24e2e0030967"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b7c371f-8265-472b-b01a-88fbd14a296f",
          "title": "isAllNumbers positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isAllNumbers.spec.js",
          "file": "\\test\\numbersValidator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"before each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "ccdfdbc0-f2c9-405f-9a45-2af52b56a3f9",
              "parentUUID": "6b7c371f-8265-472b-b01a-88fbd14a296f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers positive tests\"",
              "fullTitle": "isAllNumbers positive tests \"after each\" hook in \"isAllNumbers positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f097f613-57a4-448d-baf6-1e08799e50a4",
              "parentUUID": "6b7c371f-8265-472b-b01a-88fbd14a296f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an array",
              "fullTitle": "isAllNumbers positive tests should return true when provided with an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [0, 1, 2, 3, 4];\nconst validationResults = validator.isAllNumbers(check);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "f142953b-3056-4298-bdd6-52864fbbc4a1",
              "parentUUID": "6b7c371f-8265-472b-b01a-88fbd14a296f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f142953b-3056-4298-bdd6-52864fbbc4a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f97a9286-b36d-4151-ae90-b438986f114b",
          "title": "isAllNumbers negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isAllNumbers.spec.js",
          "file": "\\test\\numbersValidator\\isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"before each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "befdf934-9aed-491f-80cc-6b4b4f3fb09e",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers negative tests\"",
              "fullTitle": "isAllNumbers negative tests \"after each\" hook in \"isAllNumbers negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "7b38976d-c508-4652-8e14-9d12a4d0fd8e",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return false if provided with an array containing a string",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [0, 1, 2, 'not a number'];\nconst validationResults = validator.isAllNumbers(check);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "e3d94dcc-29c4-4d73-95cd-b69e1542d8a2",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if provided with an array containing a boolean",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [0, 1, 2, true];\nconst validationResults = validator.isAllNumbers(check);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "71ea4101-67f8-4e34-9344-0ebf05b6167e",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if provided with an array containing an object",
              "fullTitle": "isAllNumbers negative tests should return false if provided with an array containing an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [0, 1, 2, { not: 'an array' }];\nconst validationResults = validator.isAllNumbers(check);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "75954086-ae57-4d35-b628-d7bdb98c2300",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if not provided with a string instead of an array",
              "fullTitle": "isAllNumbers negative tests should throw an error if not provided with a string instead of an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 2;\nexpect(() => {\n  validator.isAllNumbers(check);\n}).to.throw(`[${check}] is not an array`);",
              "err": {},
              "uuid": "5bd838e8-1e73-4f60-b925-e2d49edb7862",
              "parentUUID": "f97a9286-b36d-4151-ae90-b438986f114b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3d94dcc-29c4-4d73-95cd-b69e1542d8a2",
            "71ea4101-67f8-4e34-9344-0ebf05b6167e",
            "75954086-ae57-4d35-b628-d7bdb98c2300",
            "5bd838e8-1e73-4f60-b925-e2d49edb7862"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dba879ea-5653-4eaf-b921-227447dd4735",
          "title": "isInteger positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isInteger.spec.js",
          "file": "\\test\\numbersValidator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"before each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "60532418-e5fc-47d8-91aa-2d10b93f5262",
              "parentUUID": "dba879ea-5653-4eaf-b921-227447dd4735",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger positive tests\"",
              "fullTitle": "isInteger positive tests \"after each\" hook in \"isInteger positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "501a3e8e-1ce8-4f82-bcb8-0c13b3cb18ba",
              "parentUUID": "dba879ea-5653-4eaf-b921-227447dd4735",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if provided with an integer",
              "fullTitle": "isInteger positive tests should return true if provided with an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 7;\nconst validationResults = validator.isInteger(check);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "8838cdda-663e-4e6c-8b7e-cb2d293de68f",
              "parentUUID": "dba879ea-5653-4eaf-b921-227447dd4735",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if provided with an integer",
              "fullTitle": "isInteger positive tests should return true if provided with an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = -7;\nconst validationResults = validator.isInteger(check);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "3cbe0dd2-3588-4fc0-acd5-4fe1ff3ec792",
              "parentUUID": "dba879ea-5653-4eaf-b921-227447dd4735",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8838cdda-663e-4e6c-8b7e-cb2d293de68f",
            "3cbe0dd2-3588-4fc0-acd5-4fe1ff3ec792"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "127d3c62-fd83-4e88-84aa-81f759abbc73",
          "title": "isInteger negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isInteger.spec.js",
          "file": "\\test\\numbersValidator\\isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"before each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "35f3cda4-5b8b-4530-8e9a-41cbbc2d4032",
              "parentUUID": "127d3c62-fd83-4e88-84aa-81f759abbc73",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger negative tests\"",
              "fullTitle": "isInteger negative tests \"after each\" hook in \"isInteger negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "1d87f659-0786-44f4-b34a-ef0f9736ad12",
              "parentUUID": "127d3c62-fd83-4e88-84aa-81f759abbc73",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should throw an error if provided with a string",
              "fullTitle": "isInteger negative tests should throw an error if provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = '7';\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "3c69b47f-f7c7-4d69-945d-19b524459ae4",
              "parentUUID": "127d3c62-fd83-4e88-84aa-81f759abbc73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a boolean",
              "fullTitle": "isInteger negative tests should throw an error if provided with a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = true;\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "e2bc1db3-902f-48f7-a0f9-018bde966c4a",
              "parentUUID": "127d3c62-fd83-4e88-84aa-81f759abbc73",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array",
              "fullTitle": "isInteger negative tests should throw an error if provided with an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = ['1', 2];\nexpect(() => {\n  validator.isInteger(check);\n}).to.throw(`[${check}] is not a number`);",
              "err": {},
              "uuid": "cd184969-9d9d-449a-ba6b-3c8afee9b0d6",
              "parentUUID": "127d3c62-fd83-4e88-84aa-81f759abbc73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c69b47f-f7c7-4d69-945d-19b524459ae4",
            "e2bc1db3-902f-48f7-a0f9-018bde966c4a",
            "cd184969-9d9d-449a-ba6b-3c8afee9b0d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce48c108-4c81-4c0c-ba9a-9bdf3070ac7f",
          "title": "isNumberEven positive tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isNumberEven.spec.js",
          "file": "\\test\\numbersValidator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"before each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f969994f-afd8-4420-aa2e-44f70f5fbd3b",
              "parentUUID": "ce48c108-4c81-4c0c-ba9a-9bdf3070ac7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive tests\"",
              "fullTitle": "isNumberEven positive tests \"after each\" hook in \"isNumberEven positive tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "12e95669-2926-4d5c-9685-38cc0935ea8d",
              "parentUUID": "ce48c108-4c81-4c0c-ba9a-9bdf3070ac7f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive tests should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 4;\nconst validationResults = validator.isNumberEven(check);\nexpect(validationResults).to.be.equal(true);",
              "err": {},
              "uuid": "2c1c2a39-3d83-411c-90e9-fbcc02a8fb55",
              "parentUUID": "ce48c108-4c81-4c0c-ba9a-9bdf3070ac7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c1c2a39-3d83-411c-90e9-fbcc02a8fb55"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
          "title": "isNumberEven negative tests",
          "fullFile": "C:\\CODE\\automation\\AT_in_JS_Homework\\test\\numbersValidator\\isNumberEven.spec.js",
          "file": "\\test\\numbersValidator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"before each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "ba6abef5-68dd-4462-8b76-121bb46d6e06",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven negative tests\"",
              "fullTitle": "isNumberEven negative tests \"after each\" hook in \"isNumberEven negative tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "5c554de3-f8ee-492a-8e54-cc62bdfe778c",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven negative tests should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = 3;\nconst validationResults = validator.isNumberEven(check);\nexpect(validationResults).to.be.equal(false);",
              "err": {},
              "uuid": "857cd6bb-59a3-45df-b14b-4b80f41c1317",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a string",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = '4';\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"string\"`);",
              "err": {},
              "uuid": "b09741aa-fe77-47a6-9b94-94259696ef4f",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with a boolean",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = true;\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"boolean\"`);",
              "err": {},
              "uuid": "987af601-a7e0-49f0-9823-ac23e094c2b0",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if provided with an array",
              "fullTitle": "isNumberEven negative tests should throw an error if provided with an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const check = [4, 6, 8];\nexpect(() => {\n  validator.isNumberEven(check);\n}).to.throw(`[${check}] is not of type \"Number\" it is of type \"object\"`);",
              "err": {},
              "uuid": "8c2c1e25-dcc4-400d-9a70-ad6ca73d6291",
              "parentUUID": "1bcc47de-99cc-43ba-9eb5-51a98be8edbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "857cd6bb-59a3-45df-b14b-4b80f41c1317",
            "b09741aa-fe77-47a6-9b94-94259696ef4f",
            "987af601-a7e0-49f0-9823-ac23e094c2b0",
            "8c2c1e25-dcc4-400d-9a70-ad6ca73d6291"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}